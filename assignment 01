#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Rental {
    char carModel[30];
    int customerID;
    char startDate[10];
    char endDate[10];
    float rentalPrice;
};

void addRental(FILE *file);
void searchRental(FILE *file);
void displayRentals(FILE *file);
void updateRental(FILE *file);
void deleteRental(FILE *file);
void generateReport(FILE *file);
int getTotalRentals(FILE *file);
float getTotalRevenue(FILE *file);

int main() {
    FILE *file = fopen("carRental.txt", "rb+");
    if (file == NULL) {
        file = fopen("carRental.txt", "wb+");
        if (file == NULL) {
            printf("Failed to create the rental file.\n");
            return 1;
        }
        int totalRentals = 0;
        fwrite(&totalRentals, sizeof(int), 1, file);
    }

    int choice;
    do {
        printf("Car Rental Management System\n");
        printf("1. Add a new rental to the system\n");
        printf("2. Search for a rental\n");
        printf("3. Display all rentals\n");
        printf("4. Update a rental\n");
        printf("5. Delete a rental\n");
        printf("6. Generate a report\n");
        printf("7. Exit the program\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: addRental(file);
                break;
            case 2: searchRental(file);
                break;
            case 3: displayRentals(file);
                break;
            case 4: updateRental(file);
                break;
            case 5: deleteRental(file);
                break;
            case 6: generateReport(file);
                break;
            case 7:
                break;
            default:
                printf("Invalid choice. Please try again.\n");
                break;
        }
    } while (choice != 7);

    fclose(file);
    return 0;
}

void addRental(FILE *file) {
    struct Rental rental;
    printf("Enter car model: ");
    scanf("%s", rental.carModel);
    printf("Enter customer ID: ");
    scanf("%d", &rental.customerID);
    printf("Enter start date: ");
    scanf("%s", rental.startDate);
    printf("Enter end date: ");
    scanf("%s", rental.endDate);
    printf("Enter rental price: ");
    scanf("%f", &rental.rentalPrice);

    fseek(file, 0, SEEK_END);
    fwrite(&rental, sizeof(struct Rental), 1, file);

    int totalRentals = getTotalRentals(file) + 1;
    fseek(file, 0, SEEK_SET);
    fwrite(&totalRentals, sizeof(int), 1, file);

    printf("Rental added successfully.\n");
}

void searchRental(FILE *file) {
    char searchStr[30];
    printf("Enter the car model or customer ID to search: ");
    scanf("%s", searchStr);

    struct Rental rental;
    int found = 0;
    int totalRentals = getTotalRentals(file);

    for (int i = 0; i < totalRentals; i++) {
        fseek(file, sizeof(int) + i * sizeof(struct Rental), SEEK_SET);
        fread(&rental, sizeof(struct Rental), 1, file);

        if (strstr(rental.carModel, searchStr) != NULL || rental.customerID == atoi(searchStr)) {
            printf("Car Model: %s\n", rental.carModel);
            printf("Customer ID: %d\n", rental.customerID);
            printf("Start Date: %s\n", rental.startDate);
            printf("End Date: %s\n", rental.endDate);
            printf("Rental Price: %.2f\n", rental.rentalPrice);
            printf("--------------------\n");
            found = 1;
        }
    }

    if (!found) {
        printf("No rentals found with the given car model or customer ID.\n");
    }
}

void displayRentals(FILE *file) {
    struct Rental rental;
    int totalRentals = getTotalRentals(file);

    for (int i = 0; i < totalRentals; i++) {
        fseek(file, sizeof(int) + i * sizeof(struct Rental), SEEK_SET);
        fread(&rental, sizeof(struct Rental), 1, file);

        printf("Car Model: %s\n", rental.carModel);
        printf("Customer ID: %d\n", rental.customerID);
        printf("Start Date: %s\n", rental.startDate);
        printf("End Date: %s\n", rental.endDate);
        printf("Rental Price: %.2f\n", rental.rentalPrice);
        printf("--------------------\n");
    }

    printf("Total rentals: %d\n", totalRentals);
}

void updateRental(FILE *file) {
    int customerID;
    printf("Enter the customer ID of the rental to update: ");
    scanf("%d", &customerID);

    struct Rental rental;
    int found = 0;
    int totalRentals = getTotalRentals(file);

    for (int i = 0; i < totalRentals; i++) {
        fseek(file, sizeof(int) + i * sizeof(struct Rental), SEEK_SET);
        fread(&rental, sizeof(struct Rental), 1, file);

        if (rental.customerID == customerID) {
            printf("Enter new car model: ");
            scanf("%s", rental.carModel);
            printf("Enter new start date: ");
            scanf("%s", rental.startDate);
            printf("Enter new end date: ");
            scanf("%s", rental.endDate);
            printf("Enter new rental price: ");
            scanf("%f", &rental.rentalPrice);

            fseek(file, sizeof(int) + i * sizeof(struct Rental), SEEK_SET);
            fwrite(&rental, sizeof(struct Rental), 1, file);

            printf("Rental updated successfully.\n");
            found = 1;
            break;
        }
    }

    if (!found) {
        printf("No rental found with the given customer ID.\n");
    }
}

void deleteRental(FILE *file) {
    int customerID;
    printf("Enter the customer ID of the rental to delete: ");
    scanf("%d", &customerID);

    struct Rental rental;
    int found = 0;
    int totalRentals = getTotalRentals(file);

    for (int i = 0; i < totalRentals; i++) {
        fseek(file, sizeof(int) + i * sizeof(struct Rental), SEEK_SET);
        fread(&rental, sizeof(struct Rental), 1, file);

        if (rental.customerID == customerID) {
            struct Rental lastRental;
            fseek(file, sizeof(int) + (totalRentals - 1) * sizeof(struct Rental), SEEK_SET);
            fread(&lastRental, sizeof(struct Rental), 1, file);
            fseek(file, sizeof(int) + i * sizeof(struct Rental), SEEK_SET);
            fwrite(&lastRental, sizeof(struct Rental), 1, file);

            totalRentals--;
            fseek(file, 0, SEEK_SET);
            fwrite(&totalRentals, sizeof(int), 1, file);

            printf("Rental deleted successfully.\n");
            found = 1;
            break;
        }
    }

    if (!found) {
        printf("No rental found with the given customer ID.\n");
    }
}

void generateReport(FILE *file) {
    struct Rental rental;
    int totalRentals = getTotalRentals(file);
    float totalRevenue = 0.0;

    printf("Car Rental Report\n");

    for (int i = 0; i < totalRentals; i++) {
        fseek(file, sizeof(int) + i * sizeof(struct Rental), SEEK_SET);
        fread(&rental, sizeof(struct Rental), 1, file);

        printf("Car Model: %s\n", rental.carModel);
        printf("Rental Price: %.2f\n", rental.rentalPrice);
        printf("--------------------\n");

        totalRevenue += rental.rentalPrice;
    }

    printf("Total rentals: %d\n", totalRentals);
    printf("Total revenue: %.2f\n", totalRevenue);
}

int getTotalRentals(FILE *file) {
    int totalRentals;
    fseek(file, 0, SEEK_SET);
    fread(&totalRentals, sizeof(int), 1, file);
    return totalRentals;
}
